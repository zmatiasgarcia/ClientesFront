{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { map, catchError, tap } from \"rxjs/operators\";\nimport swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ClienteService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.urlEndPoint = 'http://localhost:8080/api/clientes';\n    this.httpHeader = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  getClientes() {\n    //return of(CLIENTES);\n    return this.http.get(this.urlEndPoint).pipe(tap(response => {\n      let clientes = response;\n      console.log('ClienteService: tap 1');\n      clientes.forEach(cliente => {\n        console.log(cliente.nombre);\n      });\n    }), map(response => {\n      let clientes = response;\n      return clientes.map(cliente => {\n        cliente.nombre = cliente.nombre.toUpperCase();\n        // cliente.createAt = formatDate(cliente.createAt, 'dd-MM-yyyy', 'en-US');\n        return cliente;\n      });\n    }), tap(response => {\n      console.log('ClienteService: tap 2');\n      response.forEach(cliente => {\n        console.log(cliente.nombre);\n      });\n    }));\n  }\n  create(cliente) {\n    return this.http.post(this.urlEndPoint, cliente, {\n      headers: this.httpHeader\n    }).pipe(map(response => response.cliente), catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      console.error(e.error.mensaje);\n      swal.fire(e.error.mensaje, e.error.error, 'error');\n      return throwError(e);\n    }));\n  }\n  getCliente(id) {\n    return this.http.get(`${this.urlEndPoint}/${id}`).pipe(catchError(e => {\n      this.router.navigate(['/clientes']);\n      console.error(e.error.mensaje);\n      swal.fire('Error al editar', e.error.mensaje, 'error');\n      return throwError(e);\n    }));\n  }\n  update(cliente) {\n    return this.http.put(`${this.urlEndPoint}/${cliente.id}`, cliente, {\n      headers: this.httpHeader\n    }).pipe(catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      console.error(e.error.mensaje);\n      swal.fire(e.error.mensaje, e.error.error, 'error');\n      return throwError(e);\n    }));\n  }\n  delete(id) {\n    return this.http.delete(`${this.urlEndPoint}/${id}`, {\n      headers: this.httpHeader\n    }).pipe(catchError(e => {\n      console.error(e.error.mensaje);\n      swal.fire(e.error.mensaje, e.error.error, 'error');\n      return throwError(e);\n    }));\n  }\n}\nClienteService.ɵfac = function ClienteService_Factory(t) {\n  return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nClienteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClienteService,\n  factory: ClienteService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","HttpHeaders","map","catchError","tap","swal","ClienteService","constructor","http","router","urlEndPoint","httpHeader","getClientes","get","pipe","response","clientes","console","log","forEach","cliente","nombre","toUpperCase","create","post","headers","e","status","error","mensaje","fire","getCliente","id","navigate","update","put","delete","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["D:\\spring5\\angular\\clientes-app\\src\\app\\clientes\\cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { formatDate } from \"@angular/common\";\nimport { CLIENTES } from \"./clientes.json\";\nimport { Cliente } from './cliente';\nimport { of, Observable, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { map, catchError, tap } from \"rxjs/operators\";\nimport swal from 'sweetalert2';\nimport { Router } from \"@angular/router\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClienteService {\n\n  private urlEndPoint: string = 'http://localhost:8080/api/clientes';\n\n  private httpHeader = new HttpHeaders({'Content-Type': 'application/json'})\n\n  constructor(private http: HttpClient, private router:Router) { }\n\n  getClientes(): Observable<Cliente[]>{\n    //return of(CLIENTES);\n    return this.http.get(this.urlEndPoint).pipe(\n      tap(response =>{\n        let clientes = response as Cliente[];\n        console.log('ClienteService: tap 1')\n        clientes.forEach( cliente =>{\n          console.log(cliente.nombre);\n        }\n          \n        )\n      }),\n      map(response => {\n      let clientes = response as Cliente[];\n\n      return clientes.map(cliente => {\n        cliente.nombre = cliente.nombre.toUpperCase();\n       // cliente.createAt = formatDate(cliente.createAt, 'dd-MM-yyyy', 'en-US');\n        return cliente;\n      });\n      }\n      ),\n      tap(response =>{\n        console.log('ClienteService: tap 2')\n        response.forEach( cliente =>{\n          console.log(cliente.nombre);\n        }\n          \n        )\n      }),\n    );\n  }\n\n  create(cliente: Cliente) : Observable<Cliente>{\n    return this.http.post<any>(this.urlEndPoint, cliente, {headers: this.httpHeader}).pipe(\n      map( (response:any) => response.cliente as Cliente),\n      catchError(e => {\n\n        if(e.status ==400){\n          return throwError(e);\n        }\n\n        console.error(e.error.mensaje);\n        swal.fire(e.error.mensaje, e.error.error,'error');\n        return throwError(e);\n      })\n    )\n  }\n\n\n  getCliente(id): Observable<Cliente>{\n    return this.http.get<Cliente>(`${this.urlEndPoint}/${id}`).pipe(\n      \n      catchError(e => {\n        this.router.navigate(['/clientes']);\n          console.error(e.error.mensaje);\n          swal.fire('Error al editar', e.error.mensaje, 'error');\n          return  throwError(e)\n      })\n    )\n  }\n\n\n  update(cliente: Cliente): Observable<any>{\n    return this.http.put<any>(`${this.urlEndPoint}/${cliente.id}`, cliente, {headers: this.httpHeader}).pipe(\n      catchError(e => {\n\n        if(e.status ==400){\n          return throwError(e);\n        }\n        console.error(e.error.mensaje);\n        swal.fire(e.error.mensaje, e.error.error,'error');\n        return throwError(e);\n      })\n    )\n  }\n\n  delete(id: number): Observable<Cliente>{\n    return this.http.delete<Cliente>(`${this.urlEndPoint}/${id}`, {headers: this.httpHeader}).pipe(\n      catchError(e => {\n        console.error(e.error.mensaje);\n        swal.fire(e.error.mensaje, e.error.error,'error');\n        return throwError(e);\n      })\n    )\n  }\n}\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}