{"ast":null,"code":"import { Cliente } from \"./cliente\";\nimport swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./cliente.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction FormComponent_button_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function FormComponent_button_22_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.create());\n    });\n    i0.ɵɵtext(1, \"Crear\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormComponent_ng_template_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function FormComponent_ng_template_23_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.update());\n    });\n    i0.ɵɵtext(1, \"Editar\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FormComponent {\n  constructor(clienteService, router, activatedRoute) {\n    this.clienteService = clienteService;\n    this.router = router;\n    this.activatedRoute = activatedRoute;\n    this.cliente = new Cliente();\n    this.titulo = \"Crear Cliente\";\n  }\n  ngOnInit() {\n    this.cargarCliente();\n  }\n  cargarCliente() {\n    this.activatedRoute.params.subscribe(params => {\n      let id = params['id'];\n      if (id) {\n        this.clienteService.getCliente(id).subscribe(cliente => this.cliente = cliente);\n      }\n    });\n  }\n  create() {\n    this.clienteService.create(this.cliente).subscribe(json => {\n      this.router.navigate(['/clientes']);\n      swal.fire('Nuevo cliente', `Cliente ${json.cliente.nombre} creado con exito!`, 'success');\n    });\n  }\n  update() {\n    this.clienteService.update(this.cliente).subscribe(cliente => {\n      this.router.navigate(['/clientes']);\n      swal.fire('Cliente Actualizado', `Cliente ${cliente.nombre} actualizado con exito`, 'success');\n    });\n  }\n}\nFormComponent.ɵfac = function FormComponent_Factory(t) {\n  return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.ClienteService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormComponent,\n  selectors: [[\"app-form\"]],\n  decls: 25,\n  vars: 6,\n  consts: [[1, \"card\", \"bg-dark\", \"text-white\"], [1, \"card-header\"], [1, \"card-body\"], [1, \"form-group\", \"row\"], [\"for\", \"nombre\", 1, \"col-form-label\", \"col-sm-2\"], [1, \"col-sm-6\"], [\"type\", \"text\", \"name\", \"nombre\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"apellido\", 1, \"col-form-label\", \"col-sm-2\"], [\"type\", \"text\", \"name\", \"apellido\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"email\", 1, \"col-form-label\", \"col-sm-2\"], [\"type\", \"text\", \"name\", \"email\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"class\", \"btn btn-primary\", \"role\", \"button\", 3, \"click\", 4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [\"role\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", \"role\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function FormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵtext(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\")(5, \"div\", 3)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Nombre\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 5)(9, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.cliente.nombre = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"label\", 7);\n      i0.ɵɵtext(12, \"Apellido\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 5)(14, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_input_ngModelChange_14_listener($event) {\n        return ctx.cliente.apellido = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"label\", 9);\n      i0.ɵɵtext(17, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 5)(19, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_input_ngModelChange_19_listener($event) {\n        return ctx.cliente.email = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(20, \"div\", 3)(21, \"div\", 5);\n      i0.ɵɵtemplate(22, FormComponent_button_22_Template, 2, 0, \"button\", 11);\n      i0.ɵɵtemplate(23, FormComponent_ng_template_23_Template, 2, 0, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(24);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.titulo);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.cliente.nombre);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.cliente.apellido);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.cliente.email);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.cliente.id)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.NgModel, i4.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"names":["Cliente","swal","i0","ɵɵelementStart","ɵɵlistener","FormComponent_button_22_Template_button_click_0_listener","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","create","ɵɵtext","ɵɵelementEnd","FormComponent_ng_template_23_Template_button_click_0_listener","_r6","ctx_r5","update","FormComponent","constructor","clienteService","router","activatedRoute","cliente","titulo","ngOnInit","cargarCliente","params","subscribe","id","getCliente","json","navigate","fire","nombre","ɵɵdirectiveInject","i1","ClienteService","i2","Router","ActivatedRoute","selectors","decls","vars","consts","template","FormComponent_Template","rf","ctx","FormComponent_Template_input_ngModelChange_9_listener","$event","FormComponent_Template_input_ngModelChange_14_listener","apellido","FormComponent_Template_input_ngModelChange_19_listener","email","ɵɵtemplate","FormComponent_button_22_Template","FormComponent_ng_template_23_Template","ɵɵtemplateRefExtractor","ɵɵadvance","ɵɵtextInterpolate","ɵɵproperty","_r1"],"sources":["C:\\Users\\matias\\spring5\\angular\\clientes-app\\src\\app\\clientes\\form.component.ts","C:\\Users\\matias\\spring5\\angular\\clientes-app\\src\\app\\clientes\\form.component.html"],"sourcesContent":["\nimport { Component } from '@angular/core';\nimport { Cliente  } from \"./cliente\";\nimport { ClienteService } from \"./cliente.service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport  swal  from 'sweetalert2';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html'\n  \n})\nexport class FormComponent {\n    cliente:Cliente = new Cliente();\n    titulo: string = \"Crear Cliente\";\n  constructor(private clienteService: ClienteService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute ){\n    \n  }\n\n  ngOnInit(){\n    this.cargarCliente();\n  }\n\n   cargarCliente(): void{\n      this.activatedRoute.params.subscribe(params => {\n        let id = params['id']\n        if(id){\n          this.clienteService.getCliente(id).subscribe( (cliente) => this.cliente = cliente)\n        }\n      })\n   }\n\n   create(): void{\n    this.clienteService.create(this.cliente)\n    .subscribe(json => {\n      this.router.navigate(['/clientes'])\n      swal.fire('Nuevo cliente', `Cliente ${json.cliente.nombre} creado con exito!`,'success')\n  }\n  );\n}\n\nupdate(): void{\n  this.clienteService.update(this.cliente)\n  .subscribe(cliente =>{\n    this.router.navigate(['/clientes'])\n    swal.fire('Cliente Actualizado', `Cliente ${cliente.nombre} actualizado con exito`,'success');\n  })\n}\n\n\n\n}\n","<div class=\"card bg-dark text-white\">\n    <div class=\"card-header\">{{ titulo }}</div>\n    <div class=\"card-body\">\n\n        <form>\n            <div class=\"form-group row\">\n\n                <label for=\"nombre\" class=\"col-form-label col-sm-2\">Nombre</label>\n\n                <div class=\"col-sm-6\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"cliente.nombre\" name=\"nombre\">\n                    <!--ngModel es para mapear objetos-->\n                </div>\n\n            </div>\n\n       \n\n       \n            <div class=\"form-group row\">\n\n                <label for=\"apellido\" class=\"col-form-label col-sm-2\">Apellido</label>\n\n                <div class=\"col-sm-6\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"cliente.apellido\" name=\"apellido\">\n\n                </div>\n\n            </div>\n\n        \n\n\n        \n            <div class=\"form-group row\">     \n                <label for=\"email\" class=\"col-form-label col-sm-2\">Email</label>        \n                <div class=\"col-sm-6\">\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"cliente.email\" name=\"email\">\n                </div>\n            </div> \n        \n\n        <div class=\"form-group row\">\n            <div class=\"col-sm-6\">\n                <button class=\"btn btn-primary\" role=\"button\" (click)='create()' *ngIf=\"!cliente.id else elseBlock\">Crear</button>\n            \n                <ng-template #elseBlock>\n                    <button type=\"button\" class=\"btn btn-primary\" role=\"button\" (click)=\"update()\">Editar</button>\n                </ng-template>\n            </div>\n        </div>\n    </form>\n\n\n    </div>\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}